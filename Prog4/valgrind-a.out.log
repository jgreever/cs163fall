==343393== Memcheck, a memory error detector
==343393== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==343393== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==343393== Command: ./a.out
==343393== Parent PID: 302966
==343393== 
==343393== Use of uninitialised value of size 8
==343393==    at 0x109AF6: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:51)
==343393==    by 0x109D34: entry::copyEntry(entry const&) (entry.cpp:78)
==343393==    by 0x1093CA: bst::insert(node*&, entry*) (bst.cpp:76)
==343393==    by 0x109377: bst::insert(entry*&) (bst.cpp:68)
==343393==    by 0x10A0EE: main (main.cpp:41)
==343393==  Uninitialised value was created by a heap allocation
==343393==    at 0x483BE63: operator new(unsigned long) (vg_replace_malloc.c:344)
==343393==    by 0x1093A7: bst::insert(node*&, entry*) (bst.cpp:75)
==343393==    by 0x109377: bst::insert(entry*&) (bst.cpp:68)
==343393==    by 0x10A0EE: main (main.cpp:41)
==343393== 
==343393== Invalid read of size 8
==343393==    at 0x109AF6: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:51)
==343393==    by 0x109D34: entry::copyEntry(entry const&) (entry.cpp:78)
==343393==    by 0x1093CA: bst::insert(node*&, entry*) (bst.cpp:76)
==343393==    by 0x109377: bst::insert(entry*&) (bst.cpp:68)
==343393==    by 0x10A0EE: main (main.cpp:41)
==343393==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==343393== 
==343393== 
==343393== Process terminating with default action of signal 11 (SIGSEGV)
==343393==  Access not within mapped region at address 0x0
==343393==    at 0x109AF6: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:51)
==343393==    by 0x109D34: entry::copyEntry(entry const&) (entry.cpp:78)
==343393==    by 0x1093CA: bst::insert(node*&, entry*) (bst.cpp:76)
==343393==    by 0x109377: bst::insert(entry*&) (bst.cpp:68)
==343393==    by 0x10A0EE: main (main.cpp:41)
==343393==  If you believe this happened as a result of a stack
==343393==  overflow in your program's main thread (unlikely but
==343393==  possible), you can try to increase the size of the
==343393==  main thread stack using the --main-stacksize= flag.
==343393==  The main thread stack size used in this run was 8388608.
==343393== 
==343393== HEAP SUMMARY:
==343393==     in use at exit: 82 bytes in 8 blocks
==343393==   total heap usage: 11 allocs, 3 frees, 74,834 bytes allocated
==343393== 
==343393== 2 bytes in 1 blocks are still reachable in loss record 1 of 8
==343393==    at 0x483C583: operator new[](unsigned long) (vg_replace_malloc.c:433)
==343393==    by 0x109BD8: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:62)
==343393==    by 0x10A0D5: main (main.cpp:40)
==343393== 
==343393== 2 bytes in 1 blocks are still reachable in loss record 2 of 8
==343393==    at 0x483C583: operator new[](unsigned long) (vg_replace_malloc.c:433)
==343393==    by 0x109C10: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:64)
==343393==    by 0x10A0D5: main (main.cpp:40)
==343393== 
==343393== 2 bytes in 1 blocks are still reachable in loss record 3 of 8
==343393==    at 0x483C583: operator new[](unsigned long) (vg_replace_malloc.c:433)
==343393==    by 0x109C4A: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:66)
==343393==    by 0x10A0D5: main (main.cpp:40)
==343393== 
==343393== 2 bytes in 1 blocks are still reachable in loss record 4 of 8
==343393==    at 0x483C583: operator new[](unsigned long) (vg_replace_malloc.c:433)
==343393==    by 0x109C84: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:68)
==343393==    by 0x10A0D5: main (main.cpp:40)
==343393== 
==343393== 2 bytes in 1 blocks are still reachable in loss record 5 of 8
==343393==    at 0x483C583: operator new[](unsigned long) (vg_replace_malloc.c:433)
==343393==    by 0x109CBE: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:70)
==343393==    by 0x10A0D5: main (main.cpp:40)
==343393== 
==343393== 8 bytes in 1 blocks are still reachable in loss record 6 of 8
==343393==    at 0x483BE63: operator new(unsigned long) (vg_replace_malloc.c:344)
==343393==    by 0x109EF8: main (main.cpp:14)
==343393== 
==343393== 24 bytes in 1 blocks are still reachable in loss record 7 of 8
==343393==    at 0x483BE63: operator new(unsigned long) (vg_replace_malloc.c:344)
==343393==    by 0x1093A7: bst::insert(node*&, entry*) (bst.cpp:75)
==343393==    by 0x109377: bst::insert(entry*&) (bst.cpp:68)
==343393==    by 0x10A0EE: main (main.cpp:41)
==343393== 
==343393== 40 bytes in 1 blocks are still reachable in loss record 8 of 8
==343393==    at 0x483BE63: operator new(unsigned long) (vg_replace_malloc.c:344)
==343393==    by 0x109F14: main (main.cpp:15)
==343393== 
==343393== LEAK SUMMARY:
==343393==    definitely lost: 0 bytes in 0 blocks
==343393==    indirectly lost: 0 bytes in 0 blocks
==343393==      possibly lost: 0 bytes in 0 blocks
==343393==    still reachable: 82 bytes in 8 blocks
==343393==         suppressed: 0 bytes in 0 blocks
==343393== 
==343393== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
==343393== 
==343393== 1 errors in context 1 of 2:
==343393== Invalid read of size 8
==343393==    at 0x109AF6: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:51)
==343393==    by 0x109D34: entry::copyEntry(entry const&) (entry.cpp:78)
==343393==    by 0x1093CA: bst::insert(node*&, entry*) (bst.cpp:76)
==343393==    by 0x109377: bst::insert(entry*&) (bst.cpp:68)
==343393==    by 0x10A0EE: main (main.cpp:41)
==343393==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==343393== 
==343393== 
==343393== 1 errors in context 2 of 2:
==343393== Use of uninitialised value of size 8
==343393==    at 0x109AF6: entry::createEntry(char*, char*, char*, char*, char*) (entry.cpp:51)
==343393==    by 0x109D34: entry::copyEntry(entry const&) (entry.cpp:78)
==343393==    by 0x1093CA: bst::insert(node*&, entry*) (bst.cpp:76)
==343393==    by 0x109377: bst::insert(entry*&) (bst.cpp:68)
==343393==    by 0x10A0EE: main (main.cpp:41)
==343393==  Uninitialised value was created by a heap allocation
==343393==    at 0x483BE63: operator new(unsigned long) (vg_replace_malloc.c:344)
==343393==    by 0x1093A7: bst::insert(node*&, entry*) (bst.cpp:75)
==343393==    by 0x109377: bst::insert(entry*&) (bst.cpp:68)
==343393==    by 0x10A0EE: main (main.cpp:41)
==343393== 
==343393== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
